{"version":3,"sources":["../external \"Cesium\"","App.js","serviceWorker.js","index.js"],"names":["module","exports","Cesium","data","type","properties","name","amenity","WaterLevel","WaterQuality","Date_Time","popupContent","geometry","coordinates","fill","data2","App","full","url","imageryProvider","ArcGisMapServerImageryProvider","WebMapServiceImageryProvider","layers","alpha","IonImageryProvider","assetId","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","console","log","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mFAAAA,EAAOC,QAAUC,Q,sHCgNXC,EAAO,CACXC,KAAM,UACNC,WAAY,CACVC,KAAM,UACNC,QAAS,mBACTC,WAAY,SACZC,aAAc,OACdC,UAAW,sBACXC,aAAc,iCAEhBC,SAAU,CACRR,KAAM,QACNS,YAAa,CAAC,WAAY,WAC1BC,KAAM,qBAIJC,EAAQ,CACZX,KAAM,UACNC,WAAY,CACVC,KAAM,QACNC,QAAS,cACTC,WAAY,SACZC,aAAc,OACdC,UAAW,sBACXC,aAAc,2BAEhBC,SAAU,CACRR,KAAM,QACNS,YAAa,CAAC,WAAY,aAiCfG,EA5BH,kBACV,kBAAC,IAAD,CAAQC,MAAI,GAEV,kBAAC,IAAD,CAAmBd,KAAM,0BACzB,kBAAC,IAAD,CAAee,IAAK,mGACpB,kBAAC,IAAD,CAAmBf,KAAMA,IACzB,kBAAC,IAAD,CAAmBA,KAAMY,IAEzB,kBAAC,IAAD,CACEI,iBACE,IAAIC,iCAA+B,CACjCF,IAAK,gFAGP,IAAIG,+BAA6B,CAC/BH,IAAM,yOACNI,OAAS,SAIf,kBAAC,IAAD,CAAcC,MAAO,GAAKJ,gBAAiB,IAAIK,qBAAmB,CAAEC,QAAS,WC1P7DC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SAG1BC,QAAQC,IAAI,gBDsHN,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLT,QAAQS,MAAMA,EAAMC,a","file":"static/js/main.5970ff88.chunk.js","sourcesContent":["module.exports = Cesium;","// import React from 'react';\n// import { Color } from \"cesium\";\n// import { Viewer, Entity } from \"resium\";\n// import logo from './logo.svg';\n// import './App.css';\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\n\n\n\n// import React from \"react\";\n// import { Cartesian3 } from \"cesium\";\n// import { Viewer, Entity } from \"resium\";\n// import {Color} from \"cesium\";\n\n\n\n// export default class Cesium extends React.PureComponent {\n\n\n\n//   render() {\n\n//     return (\n\n      \n//       <Viewer full>\n\n//           url : 'http://localhost/cgi-bin/WMS',\n//           layers: 'villages'\n\n// 　　    <Entity\n//  　　       name=\"ฺBangkok\"\n//             description=\"testing\"\n//             position={Cartesian3.fromDegrees(101.794352, 14.750667, 100)}\n//             point={{ pixelSize: 10 }}>\n//             <h1>Hello, world.</h1>\n//             <p>This is description rendered as HTML string.</p>\n//         </Entity>\n\n//         <Entity\n//  　　       name=\"KMITL Water Sensor Node\"\n//             description=\"This is KMITL water sensor node from Beam\"\n//             position={Cartesian3.fromDegrees(100.794352, 13.750667, 100)}\n//             point={{ pixelSize: 10,  color: Color.YELLOW}}>\n//             <h1>Hello, this is sensor from Beam.</h1>\n//             <p>This is description of the node.</p>\n//         </Entity>\n        \n\n//       </Viewer>\n//     );\n//   }\n\n// }\n\n\n// import React from \"react\";\n// import { Viewer, Entity, PointGraphics, EntityDescription } from \"resium\";\n// import { Cartesian3 } from \"cesium\";\n// import { Cesium } from \"cesium\";\n\n// const position = Cartesian3.fromDegrees(-74.0707383, 40.7117244, 100);\n\n// const App = () => (\n//   <Viewer full>\n//     <Entity position={position} name=\"Tokyo\">\n//       <PointGraphics pixelSize={10} />\n//       <EntityDescription>\n//         <h1>Hello, world.</h1>\n//         <p>JSX is available here!</p>\n//       </EntityDescription>\n//     </Entity>\n//   </Viewer>\n// );\n// export default App;\n\n\n// import React from \"react\";\n// import { Viewer, Cesium3DTileset } from \"resium\";\n// import { IonResource } from \"cesium\";\n// const App = () => {\n//   let viewer; // This will be raw Cesium's Viewer object.\n//   const handleReady = tileset => {\n//     if (viewer) {\n//       viewer.zoomTo(tileset);\n//     }\n//   };\n//   return (\n//     <Viewer\n//       full\n//       ref={e => {\n//         viewer = e && e.cesiumElement;\n//       }}>\n//       <Cesium3DTileset url={IonResource.fromAssetId(5714)} onReady={handleReady} />\n//     </Viewer>\n//   );\n// };\n\n// import React, { useState } from \"react\";\n// import { storiesOf } from \"@storybook/react\";\n// import { Color } from \"cesium\";\n// import { action } from \"@storybook/addon-actions\";\n\n// import Viewer from \"../Viewer\";\n// import GeoJsonDataSource from \"./GeoJsonDataSource\";\n\n// const data = {\n//   type: \"Feature\",\n//   properties: {\n//     name: \"Coors Field\",\n//     amenity: \"Baseball Stadium\",\n//     popupContent: \"This is where the Rockies play!\",\n//   },\n//   geometry: {\n//     type: \"Point\",\n//     coordinates: [-104.99404, 39.75621],\n//   },\n// };\n\n// const onLoadAction = action(\"onLoad\");\n\n// storiesOf(\"GeoJsonDataSource\", module)\n//   .add(\"Basic\", () => (\n//     <Viewer full>\n//       <GeoJsonDataSource\n//         data={data}\n//         markerColor={Color.RED}\n//         onLoad={g => {\n//           // You can process the data source here\n//           g.entities.values[0].name = \"Coors Field!\";\n//           onLoadAction(g);\n//         }}\n//         onError={action(\"onError\")}\n//       />\n//     </Viewer>\n//   ))\n//   .add(\"Show\", () => {\n//     const [show, setShow] = useState(true);\n//     return (\n//       <Viewer full>\n//         <button\n//           style={{ position: \"absolute\", top: \"0\", left: \"0\" }}\n//           onClick={() => setShow(s => !s)}>\n//           Toggle\n//         </button>\n//         <GeoJsonDataSource data={data} markerColor={Color.RED} show={show} />\n//       </Viewer>\n//     );\n//   });\n\n\n\n\n// const onLoadAction = action(\"onLoad\");\n\n// const onLoad = (k: Cesium.KmlDataSource) => {\n//   // You can process the data source here\n//   k.entities.values[4].polygon.material = Color.RED;\n//   onLoadAction(k);\n// };\n\n// storiesOf(\"KmlDataSource\", module)\n//   .add(\"Basic\", () => (\n//     <Viewer full>\n//       <KmlDataSource data={data} onLoad={onLoad} onError={action(\"onError\")} />\n//     </Viewer>\n//   ))\n//   .add(\"Show\", () => {\n//     const [show, setShow] = useState(true);\n//     return (\n//       <Viewer full>\n//         <button\n//           style={{ position: \"absolute\", top: \"0\", left: \"0\" }}\n//           onClick={() => setShow(s => !s)}>\n//           Toggle\n//         </button>\n//         <KmlDataSource data={data} show={show} />\n//       </Viewer>\n//     );\n//   });\nimport React from \"react\";\nimport { Viewer,GeoJsonDataSource, KmlDataSource,  ImageryLayer } from \"resium\";\nimport {  ArcGisMapServerImageryProvider, WebMapServiceImageryProvider, IonImageryProvider, Cesium } from \"cesium\";\n\nconst data = {\n  type: \"Feature\",\n  properties: {\n    name: \"Bangkok\",\n    amenity: \"KMITL University\",\n    WaterLevel: \"5.8 cm\",\n    WaterQuality: \"50 %\",\n    Date_Time: \"23 April 2020 18:00\", \n    popupContent: \"This is where Beam Sensor is!\",\n  },\n  geometry: {\n    type: \"Point\",\n    coordinates: [101.794352, 14.750667],\n    fill: \"Cesium.Color.RED\",\n  },\n};\n\nconst data2 = {\n  type: \"Feature\",\n  properties: {\n    name: \"KMITL\",\n    amenity: \"Thai Sensor\",\n    WaterLevel: \"7.8 cm\",\n    WaterQuality: \"60 %\",\n    Date_Time: \"23 April 2020 18:00\", \n    popupContent: \"This is another sensor!\",\n  },\n  geometry: {\n    type: \"Point\",\n    coordinates: [100.794352, 15.750667],\n  },\n};\n\n\nconst App = () => (\n  <Viewer full>\n\n    <GeoJsonDataSource data={\"your_geo_json.geojson\"} />\n    <KmlDataSource url={\"C:/Users/user/Desktop/craco-cesium-master/example/krit_test-tha_admbnda_adm1_rtsd_20190221.kml\"} />\n    <GeoJsonDataSource data={data} />\n    <GeoJsonDataSource data={data2} />\n\n    <ImageryLayer\n      imageryProvider={\n        new ArcGisMapServerImageryProvider({\n          url: \"//services.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer\",\n        }),\n\n        new WebMapServiceImageryProvider({\n          url : 'http://localhost:8080/geoserver/krit_test/wms?service=WMS&version=1.1.0&request=GetMap&layers=krit_test%3AKritTest&bbox=-180.0%2C-89.99892578%2C180.0%2C83.59960938&width=768&height=370&srs=EPSG%3A4326&format=application/openlayers',\n          layers : '0',\n        })\n      }\n    />\n    <ImageryLayer alpha={0.5} imageryProvider={new IonImageryProvider({ assetId: 3812 })} />\n\n    \n    \n\n  </Viewer>\n);\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nconsole.log('Hello World!');\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}