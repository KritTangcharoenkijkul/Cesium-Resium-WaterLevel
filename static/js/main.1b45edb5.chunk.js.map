{"version":3,"sources":["../external \"Cesium\"","truesensor2.gltf","App.js","serviceWorker.js","index.js"],"names":["module","exports","Cesium","origin","Cartesian3","fromDegrees","cameraDest","cameraDest3","modelMatrix","Transforms","eastNorthUpToFixedFrame","modelMatrix2","modelMatrix3","App","url","glbs","minimumPixelSize","maximumScale","imageryProvider","WebMapServiceImageryProvider","layers","proxy","style","tileMatrixSetID","maximumLevel","getFeatureInfoAsGeoJson","parameters","transparent","tiled","format","data","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","console","log","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iFAAAA,EAAOC,QAAUC,Q,mBCAjBF,EAAOC,QAAU,IAA0B,0C,wKCuFrCE,EAASC,aAAWC,YAAY,SAAU,QAAS,GACnDC,EAAaF,aAAWC,YAAY,SAAU,QAAS,IACvDE,EAAcH,aAAWC,YAAY,SAAU,QAAS,IACxDG,EAAcC,aAAWC,wBAAwBP,GACjDQ,EAAeF,aAAWC,wBAAwBJ,GAClDM,EAAeH,aAAWC,wBAAwBH,GAmEzCM,EA9DH,kBACV,wCAMA,kBAAC,IAAD,KAGE,kBAAC,IAAD,CAAOC,IAAKC,IACZP,YAAaA,EACbQ,iBAAkB,IAClBC,aAAc,MAGd,kBAAC,IAAD,CAAOH,IAAKC,IACZP,YAAaG,EACbK,iBAAkB,IAClBC,aAAc,MAGd,kBAAC,IAAD,CAAOH,IAAKC,IACZP,YAAaI,EACbI,iBAAkB,IAClBC,aAAc,MAGd,kBAAC,IAAD,CACEC,gBAEE,IAAIC,+BAA6B,CAC/BL,IAAM,sCACNM,OAAS,yCACTC,MAAQ,sCACRC,MAAO,UACPC,gBAAiB,OACjBC,aAAc,EACdC,yBAAyB,EACzBC,WAAY,CACVC,aAAc,EACdC,OAAQ,EACRC,OAAS,iBAMjB,kBAAC,IAAD,CAAmBC,KAAM,6BCrITC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SAG1BC,QAAQC,IAAI,gBDsHN,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLT,QAAQS,MAAMA,EAAMC,c","file":"static/js/main.1b45edb5.chunk.js","sourcesContent":["module.exports = Cesium;","module.exports = __webpack_public_path__ + \"static/media/truesensor2.21beb292.gltf\";","// import React from 'react';\n// import { Color } from \"cesium\";\n// import { Viewer, Entity } from \"resium\";\n// import logo from './logo.svg';\n// import './App.css';\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\n\n\nimport React  from \"react\";\nimport { Viewer,GeoJsonDataSource, KmlDataSource,  ImageryLayer, addToolbarMenu, Model, CameraFlyTo } from \"resium\";\nimport {  ArcGisMapServerImageryProvider, WebMapServiceImageryProvider, IonImageryProvider, Color, Button, Cesium,action, Cartesian3, Transforms } from \"cesium\";\nimport glbs from \"C:/Users/user/Desktop/craco-cesium-master/example/src/truesensor2.gltf\";\n\n\n// const position1 = {\n//   type: \"Feature\",\n//   properties: {\n//     Sensor: \"1\",\n//     Water_Level: \"0\",\n//     Location: \"LADKRABANG\",\n//     Longitude: \"100.7783\",\n//     Latitude: \"13.7628\",\n//     Date_Time: \"29/05/2020 13:42:09\",\n//   },\n\n//   geometry: {\n//     type: \"Point\",\n//     coordinates: [100.7783, 13.7628],\n//   },\n// };\n\n// const position2 = {\n//   type: \"Feature\",\n//   properties: {\n//     Sensor: \"2\",\n//     Water_Level: \"87\",\n//     Location: \"BANGKAPI\",\n//     Longitude: \"100.6456\",\n//     Latitude: \"13.7628\",\n//     Date_Time: \"29/05/2020 13:42:21\", \n//   },\n//   geometry: {\n//     type: \"Point\",\n//     coordinates: [100.6456, 13.7628],\n//   },\n// };\n\n// const position3 = {\n//   type: \"Feature\",\n//   properties: {\n//     Sensor: \"3\",\n//     Water_Level: \"24\",\n//     Location: \"LADPRAO\",\n//     Longitude: \"100.6087\",\n//     Latitude: \"13.8242\",\n//     Date_Time: \"29/05/2020 13:41:16\", \n//   },\n//   geometry: {\n//     type: \"Point\",\n//     coordinates: [100.6087, 13.8242],\n//   },\n// };\n\nconst origin = Cartesian3.fromDegrees(100.7783, 13.7628, 0.0);\nconst cameraDest = Cartesian3.fromDegrees(100.6456, 13.7628, 10);\nconst cameraDest3 = Cartesian3.fromDegrees(100.6087, 13.8242, 10);\nconst modelMatrix = Transforms.eastNorthUpToFixedFrame(origin);\nconst modelMatrix2 = Transforms.eastNorthUpToFixedFrame(cameraDest);\nconst modelMatrix3 = Transforms.eastNorthUpToFixedFrame(cameraDest3);\n\n\n\n\nconst App = () => (\n  <addToolbarMenu>\n\n    \n  \n  {/* <Viewer imageryProvider={false}> */}\n\n  <Viewer>\n\n    {/* <CameraFlyTo destination={cameraDest} duration={0} /> */}\n    <Model url={glbs}\n    modelMatrix={modelMatrix}\n    minimumPixelSize={128}\n    maximumScale={20000}\n     />\n\n    <Model url={glbs}\n    modelMatrix={modelMatrix2}\n    minimumPixelSize={128}\n    maximumScale={20000}\n     />\n\n    <Model url={glbs}\n    modelMatrix={modelMatrix3}\n    minimumPixelSize={128}\n    maximumScale={20000}\n     />\n\n    <ImageryLayer\n      imageryProvider={  \n\n        new WebMapServiceImageryProvider({\n          url : 'http://localhost:8080/geoserver/wms',\n          layers : 'WaterLevelSystem:data_logger_model_new',\n          proxy : 'http://localhost:8080/geoserver/ows',\n          style: \"default\",\n          tileMatrixSetID: \"250m\",\n          maximumLevel: 5,\n          getFeatureInfoAsGeoJson: true,\n          parameters: {\n            transparent : true,\n            tiled : true,\n            format : 'image/png'\n          },\n        })\n      }\n    />\n\n    <GeoJsonDataSource data={\"your_geo_json.geojson\"} />\n    \n{/*     \n    <KmlDataSource url={\"C:/Users/user/Desktop/craco-cesium-master/example/src/data_logger_model_new.kml\"} /> */}\n    {/* <GeoJsonDataSource data={position1} markerColor={Color.YELLOW}/>\n    <GeoJsonDataSource data={position2} markerColor={Color.YELLOW}/>\n    <GeoJsonDataSource data={position3} markerColor={Color.YELLOW}/> */}\n\n  </Viewer>\n\n  </addToolbarMenu>\n);\n\n\nexport default App;\n\n\n\n\n\n\n\n\n\n// import React  from \"react\";\n// import { Viewer,GeoJsonDataSource, KmlDataSource,  ImageryLayer, addToolbarMenu, Model, CameraFlyTo } from \"resium\";\n// import {  ArcGisMapServerImageryProvider, WebMapServiceImageryProvider, IonImageryProvider, Color, Button, Cesium,action, Cartesian3, Transforms } from \"cesium\";\n// import glbs from \"C:/Users/user/Desktop/craco-cesium-master/example/src/truesensor2.gltf\";\n\n// const App = () => (\n//   <Viewer>\n// <ImageryLayer\n//       imageryProvider={  \n\n//         new WebMapServiceImageryProvider({\n//           url: 'http://localhost:8080/geoserver/wms',\n//           layers : 'WaterLevelSystem:data_logger_model_new',\n//           maximumLevel: 5,\n//           getFeatureInfoAsGeoJson: true,\n//           parameters: {\n//             transparent: true,\n//             format : 'image/png'\n//           },\n//         })\n//       }\n//     />\n\n//   </Viewer>\n//   );\n\n\n//   export default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nconsole.log('Hello World!');\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}